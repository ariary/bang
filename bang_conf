# Configure envvar before pentest
# as it is short you could source it in ~/bashrc

## Change Target IP (Addr) envvar
cTA() {
if [ "$1" = "-h" ]; then
    echo "Change Target Address: cTA [address]"
else
    eval export TA=$1
    sed -i "/TA/c\export TA=$1" $HOME/.bang/pentest_conf
fi
}

## Change Target port envvar
cTP() {
if [ "$1" = "-h" ]; then
    echo "Change Target Port: cTP [port]"
else
    eval export TP=$1
    sed -i "/TP/c\export TP=$1" $HOME/.bang/pentest_conf
fi
}

## Change Attacker IP (Addr) envvar
cAA() {
if [ "$1" = "-h" ]; then
    echo "Change Attacker Address: cAA [address]"
else
    eval export AA=$1
    sed -i "/AA/c\export AA=$1" $HOME/.bang/pentest_conf
fi
}

## Change Attacker port envvar
cAP() {
if [ "$1" = "-h" ]; then
    echo "Change Attacker Port: cAP [port]"
else
    eval export AP=$1
    sed -i "/AP/c\export AP=$1" $HOME/.bang/pentest_conf
fi
}

## Interactiv conf
bang.conf.pentest() {
if [ "$1" = "-h" ]; then
    echo "Configure all your pentest env vars (TA,TP, AA,AP)"
else
    echo "Enter Attacker IP: "
    read ATT_ADDR
    cAA ${ATT_ADDR}
    echo "Enter Attacker PORT: "
    read ATT_PORT
    cAP ${ATT_PORT}
    echo "Enter Target IP: "
    read TAR_ADDR
    cTA ${TAR_ADDR}
    echo "Enter Target PORT: "
    read TAR_PORT
    cTP ${TAR_PORT}
fi
}

## Current conf
alias bang.conf.pentest.map='source $HOME/.bang/pentest_conf && echo "ðŸ˜ˆ ($AA $AP) [ATTACKER] Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â»Â» ðŸ˜‡ ($TA $TP) [TARGET]"'

##Update conf
bang.conf.update() {
if [ "$1" = "-h" ]; then
    echo "Update bang files (conf + shortcut). Launch "bang" afterward to load new shortcuts."
else
    git clone https://github.com/ariary/bang.git && cd bang
    cp bang $HOME/.bang
    cp bang_conf $HOME/.bang
    cp bang_fun $HOME/.bang
    cp -r ./install $HOME/.bang
    cd .. && rm -rf bang
fi
}

##Install modules/tools
alias bang.conf.install='$HOME/.bang/install/install-tools.sh'
alias bang.conf.install.include='$HOME/.bang/install/install-tools.sh --include'
alias bang.conf.install.exclude='$HOME/.bang/install/install-tools.sh --exclude'
alias bang.conf.install-ariary='$HOME/.bang/install/install-ariary.sh'

##Show config shortcuts
bang.conf.aliases() {
export ROSE='\033[1;35m'
export NC='\033[0m'

echo -e "bang\t\t${ROSE}Load bang shortcuts & aliases in current shell${NC}"

echo -e "bang.conf.install\t\t${ROSE}Install tools used by bang${NC}"
echo -e "bang.conf.install.include\t\t${ROSE}Install tools by including a tool list${NC}"
echo -e "bang.conf.install.exclude\t\t${ROSE}Install tools by excluding a tool list${NC}"
echo -e "bang.conf.install-ariary\t\t${ROSE}Install ariary's tools used by bang${NC}"

echo -e "bang.conf.pentest.map\t\t${ROSE}Nice printing of the current pentest configuration${NC}"

}

bang.conf.ls() {
    # SHORTCUT
    bold=$(tput bold)
    normal=$(tput sgr0)
    echo "${bold}SHORTCUT${normal}"

    exclude=(bang.conf.ls bang.conf.aliases)

    #must differenciate between zsh and bash for multiline var -> array trick
    if [ -n "$ZSH_VERSION" ]; then
        FUNC=("${(@f)$(cat $HOME/.bang/bang_conf | awk '!/^main[ (]/ && /^[^ {}]+ *\(\)/ { gsub(/[()]/, "", $1); print $1}')}")
    elif [ -n "$BASH_VERSION" ]; then
        FUNC=$(cat $HOME/.bang/bang_conf | awk '!/^main[ (]/ && /^[^ {}]+ *\(\)/ { gsub(/[()]/, "", $1); print $1}')
        SAVEIFS=$IFS
        IFS=$'\n'
        FUNC=($FUNC)
        IFS=$SAVEIFS  
    fi

    for del in ${exclude[@]}
    do
        FUNC=("${FUNC[@]/$del}") #Quotes when working with strings
    done

    OUTPUT=""
    if [ -n "$ZSH_VERSION" ]; then

        for f in $FUNC
        do
            OUTPUT=$OUTPUT$(echo -n "$f"; \
            echo -n "\t\t\033[1;35m" ;\
            HELP=$($f -h) ;\
            echo "$HELP";\
            echo -n "\033[0m";)
        done
    elif [ -n "$BASH_VERSION" ]; then
        for (( i=0; i<${#FUNC[@]}; i++ ))
        do  
            OUTPUT=$OUTPUT$(echo "\n";echo -n "${FUNC[$i]}\t";\
            HELP=$(${FUNC[$i]} -h 2>/dev/null);\
            echo -e "\t\t\033[1;35m$HELP\033[0m";)
        done
    fi

    echo -e $OUTPUT | column -t -s $'\t'

    # ALIASES
    echo
    echo "${bold}ALIASES${normal}"
    bang.conf.aliases | column -t -s $'\t'
}

##Load shortcuts
alias bang='source $HOME/.bang/bang && source $HOME/.bang/bang_fun && source $HOME/.bang/pentest_conf'
